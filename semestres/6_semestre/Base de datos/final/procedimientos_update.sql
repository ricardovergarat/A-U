-- REPARTIDOR

CREATE OR REPLACE PROCEDURE ACTUALIZAR_NOMBRE_REPARTIDOR(
    RUT_ENTRADA IN CLIENTE.RUT%TYPE,
    NUEVO_NOMBRE IN CLIENTE.NOMBRE_CLIENTE.NOMBRE%TYPE,
    MENSAJE OUT VARCHAR
)
IS
    RUT_ES_NULL EXCEPTION;
    RUT_INEXISTENTE EXCEPTION;
    NOMBRE_ES_NULL EXCEPTION;
    REPETICIONES NUMBER;
BEGIN 
    LOCK TABLE REPARTIDOR IN ROW EXCLUSIVE MODE;
    IF RUT_ENTRADA IS NULL THEN
        RAISE RUT_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM REPARTIDOR WHERE RUT = RUT_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE RUT_INEXISTENTE;
        ELSE
            IF NUEVO_NOMBRE IS NULL THEN
                RAISE NOMBRE_ES_NULL;
            ELSE
                UPDATE REPARTIDOR R SET R.NOMBRE_REPARTIDOR.NOMBRE = LOWER(NUEVO_NOMBRE) WHERE RUT = RUT_ENTRADA;
                COMMIT;
                MENSAJE := 'MIAU NOMBRE REPARTIDOR';
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN RUT_ES_NULL THEN
        MENSAJE :='ES RUT ES NULL';
        ROLLBACK;
    WHEN RUT_INEXISTENTE THEN
        MENSAJE :='NO EXISTE ESE REPARTIDOR';
        ROLLBACK;
    WHEN NOMBRE_ES_NULL THEN
        MENSAJE :='NO SE INGREO EL NUEVO NOMBRE';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE :='ERROR NO IDENTIFICADO EN ACTUALIZAR NOMBRE REPARTIDOR';
        ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE ACTUALIZAR_APELLIDO_REPARTIDOR(
    RUT_ENTRADA IN CLIENTE.RUT%TYPE,
    NUEVO_APELLIDO IN CLIENTE.NOMBRE_CLIENTE.APELLIDO%TYPE,
    MENSAJE OUT VARCHAR
)
IS
    RUT_ES_NULL EXCEPTION;
    RUT_INEXISTENTE EXCEPTION;
    APELLIDO_ES_NULL EXCEPTION;
    REPETICIONES NUMBER;
BEGIN 
    LOCK TABLE REPARTIDOR IN ROW EXCLUSIVE MODE;
    IF RUT_ENTRADA IS NULL THEN
        RAISE RUT_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM REPARTIDOR WHERE RUT = RUT_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE RUT_INEXISTENTE;
        ELSE
            IF NUEVO_APELLIDO IS NULL THEN
                RAISE APELLIDO_ES_NULL;
            ELSE
                UPDATE REPARTIDOR R SET R.NOMBRE_REPARTIDOR.APELLIDO = LOWER(NUEVO_APELLIDO) WHERE RUT = RUT_ENTRADA;
                COMMIT;
                MENSAJE := 'MIAU APELLIDO REPARTIDOR';
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN RUT_ES_NULL THEN
        MENSAJE :='ES RUT ES NULL';
        ROLLBACK;
    WHEN RUT_INEXISTENTE THEN
        MENSAJE :='NO EXISTE ESE REPARTIDOR';
        ROLLBACK;
    WHEN APELLIDO_ES_NULL THEN
        MENSAJE :='NO SE INGREO EL NUEVO APELLIDP';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE :='ERROR NO IDENTIFICADO EN ACTUALIZAR APELLIDO REPARTIDOR';
        ROLLBACK;
END;

-- CLIENTE

CREATE OR REPLACE PROCEDURE ACTUALIZAR_CONTRASE헤(
    RUT_ENTRADA IN CLIENTE.RUT%TYPE,
    CONTRASE헤_ENTRADA IN CLIENTE.CONTRASE헤%TYPE,
    CONTRASE헤_CONFIRMACION IN CLIENTE.CONTRASE헤%TYPE,
    MENSAJE OUT VARCHAR
)
IS  
    RUT_ES_NULL EXCEPTION;
    RUT_INEXISTENTE EXCEPTION;
    CONTRASE헤_ES_NULL EXCEPTION;
    CARACTENER_INSUFICIENTE EXCEPTION;
    CONTRASE헤S_DISTINTAS EXCEPTION;
    REPETICIONES NUMBER;
    CANTIDAD_CARACTERES NUMBER;
BEGIN 
    LOCK TABLE CLIENTE IN ROW EXCLUSIVE MODE;
    IF RUT_ENTRADA IS NULL THEN
        RAISE RUT_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM CLIENTE WHERE RUT = RUT_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE RUT_INEXISTENTE;
        ELSE
            IF CONTRASE헤_ENTRADA IS NULL THEN
                RAISE CONTRASE헤_ES_NULL;
            ELSE
                SELECT LENGTH(CONTRASE헤_ENTRADA) INTO CANTIDAD_CARACTERES FROM DUAL;
                IF CANTIDAD_CARACTERES < 8 THEN
                    RAISE CARACTENER_INSUFICIENTE;
                ELSE
                    IF CONTRASE헤_ENTRADA = CONTRASE헤_CONFIRMACION THEN 
                    UPDATE CLIENTE SET CONTRASE헤 = CONTRASE헤_ENTRADA WHERE RUT = RUT_ENTRADA;
                    COMMIT;
                    MENSAJE := 'MIAU CONTRASE헤';
                    END IF;
                END IF;
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN RUT_ES_NULL THEN
        MENSAJE :='ES RUT ES NULL';
        ROLLBACK;
    WHEN RUT_INEXISTENTE THEN
        MENSAJE :='ESE CLIENTE NO ESTA REGISTRADO';
        ROLLBACK;
    WHEN CONTRASE헤_ES_NULL THEN
        MENSAJE :='NO SE INGRESO UNA CONTRASE헤';
        ROLLBACK;
    WHEN CARACTENER_INSUFICIENTE THEN
        MENSAJE :='LA CONTRASE헤 DEBE TENER ALEMNOS 8 CARACTERES';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERROR NO IDENTIDICADO EN ACTUALIZAR CONTRASE헤';
        ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE CAMBIO_ADMINISTRADOR(
    RUT_ENTRADA IN CLIENTE.RUT%TYPE,
    ADMINISTRADOR_ENTRADA IN CLIENTE.ADMINISTRADOR%TYPE,
    MENSAJE OUT VARCHAR
)
IS 
    RUT_ES_NULL EXCEPTION;
    RUT_INEXISTENTE EXCEPTION;
    ADMINISTRADOR_ES_NULL EXCEPTION;
    ADMINISTRADOR_INVALIDO EXCEPTION;
    REPETICIONES NUMBER;
    ADMINISTRADOR_MINUSCULA VARCHAR(2);
BEGIN
    LOCK TABLE CLIENTE IN ROW EXCLUSIVE MODE;
    IF RUT_ENTRADA IS NULL THEN
        RAISE RUT_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM CLIENTE WHERE RUT = RUT_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE RUT_INEXISTENTE;
        ELSE
            IF ADMINISTRADOR_ENTRADA IS NULL THEN
                RAISE ADMINISTRADOR_ES_NULL;
            ELSE
                ADMINISTRADOR_MINUSCULA := LOWER(ADMINISTRADOR_ENTRADA);
                IF ADMINISTRADOR_MINUSCULA = 'si' OR ADMINISTRADOR_MINUSCULA = 'no' THEN 
                    UPDATE CLIENTE SET ADMINISTRADOR = ADMINISTRADOR_MINUSCULA WHERE RUT = RUT_ENTRADA;
                    COMMIT;
                    MENSAJE := 'MIAU ADMINISTRADOR CAMBIADO';
                ELSE
                    RAISE ADMINISTRADOR_INVALIDO;
                END IF;
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN RUT_ES_NULL THEN
        MENSAJE :='ES RUT ES NULL';
        ROLLBACK;
    WHEN RUT_INEXISTENTE THEN
        MENSAJE :='ESE CLIENTE NO ESTA REGISTRADO';
        ROLLBACK;
    WHEN ADMINISTRADOR_ES_NULL THEN
        MENSAJE :='NO SE INGRESO EL TIPO DE ADMINISTRADOR';
        ROLLBACK;
    WHEN ADMINISTRADOR_INVALIDO THEN
        MENSAJE :='SOLO SE PUEDE INGRESAR SI O NO';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERROR NO IDENTIDICADO AL CAMBIAR EL TIPO DE USUARIO';
        ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE ACTUALIZAR_COMUNA(
    RUT_ENTRADA IN CLIENTE.RUT%TYPE,
    NUEVA_COMUNA IN CLIENTE.DIRECCION_CLIENTE.COMUNA%TYPE,
    MENSAJE OUT VARCHAR
)
IS 
    RUT_ES_NULL EXCEPTION;
    RUT_INEXISTENTE EXCEPTION;
    COMUNA_ES_NULL EXCEPTION;
    REPETICIONES NUMBER;
BEGIN 
    LOCK TABLE CLIENTE IN ROW EXCLUSIVE MODE;
    IF RUT_ENTRADA IS NULL THEN
        RAISE RUT_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM CLIENTE WHERE RUT = RUT_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE RUT_INEXISTENTE;
        ELSE
            IF NUEVA_COMUNA IS NULL THEN
                RAISE COMUNA_ES_NULL;
            ELSE
                UPDATE CLIENTE C SET C.DIRECCION_CLIENTE.COMUNA = LOWER(NUEVA_COMUNA) WHERE RUT = RUT_ENTRADA;
                COMMIT;
                MENSAJE := 'MIAU COMUNA';
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN RUT_ES_NULL THEN
        MENSAJE :='ES RUT ES NULL';
        ROLLBACK;
    WHEN RUT_INEXISTENTE THEN
        MENSAJE :='ESE CLIENTE NO ESTA REGISTRADO';
        ROLLBACK;
    WHEN COMUNA_ES_NULL THEN
        MENSAJE :='NO SE INGRESO LA NUEVA COMUNA';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERRO NO IDENTIFICADO EN ACTUALIZAR COMUNA';
        ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE ACTUALIZAR_CALLE(
    RUT_ENTRADA IN CLIENTE.RUT%TYPE,
    NUEVA_CALLE IN CLIENTE.DIRECCION_CLIENTE.CALLE%TYPE,
    MENSAJE OUT VARCHAR
)
IS 
    RUT_ES_NULL EXCEPTION;
    RUT_INEXISTENTE EXCEPTION;
    CALLE_ES_NULL EXCEPTION;
    REPETICIONES NUMBER;
BEGIN 
    LOCK TABLE CLIENTE IN ROW EXCLUSIVE MODE;
    IF RUT_ENTRADA IS NULL THEN
        RAISE RUT_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM CLIENTE WHERE RUT = RUT_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE RUT_INEXISTENTE;
        ELSE
            IF NUEVA_CALLE IS NULL THEN
                RAISE CALLE_ES_NULL;
            ELSE
                UPDATE CLIENTE C SET C.DIRECCION_CLIENTE.CALLE = LOWER(NUEVA_CALLE) WHERE RUT = RUT_ENTRADA;
                COMMIT;
                MENSAJE := 'MIAU CALLE';
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN RUT_ES_NULL THEN
        MENSAJE :='ES RUT ES NULL';
        ROLLBACK;
    WHEN RUT_INEXISTENTE THEN
        MENSAJE :='ESE CLIENTE NO ESTA REGISTRADO';
        ROLLBACK;
    WHEN CALLE_ES_NULL THEN
        MENSAJE :='NO SE INGRESO LA NUEVA CALLE';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERRO NO IDENTIFICADO EN ACTUALIZAR CALLE';
        ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE ACTUALIZAR_NUMERO_CASA(
    RUT_ENTRADA IN CLIENTE.RUT%TYPE,
    NUEVO_NUMERO IN CLIENTE.DIRECCION_CLIENTE.NUMERO_CASA%TYPE,
    MENSAJE OUT VARCHAR
)
IS 
    RUT_ES_NULL EXCEPTION;
    RUT_INEXISTENTE EXCEPTION;
    NUMERO_ES_NULL EXCEPTION;
    NUMERO_INVALIDO EXCEPTION;
    REPETICIONES NUMBER;
BEGIN
    LOCK TABLE CLIENTE IN ROW EXCLUSIVE MODE;
    IF RUT_ENTRADA IS NULL THEN
        RAISE RUT_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM CLIENTE WHERE RUT = RUT_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE RUT_INEXISTENTE;
        ELSE
            IF NUEVO_NUMERO IS NULL THEN
                RAISE NUMERO_ES_NULL;
            ELSE
                IF NUEVO_NUMERO < 0 OR NUEVO_NUMERO > 9999 THEN 
                    RAISE NUMERO_INVALIDO;
                ELSE
                    UPDATE CLIENTE C SET C.DIRECCION_CLIENTE.NUMERO_CASA = NUEVO_NUMERO WHERE RUT = RUT_ENTRADA;
                    COMMIT;
                    MENSAJE := 'MIAU NUMERO CASA';
                END IF;
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN RUT_ES_NULL THEN
        MENSAJE :='ES RUT ES NULL';
        ROLLBACK;
    WHEN RUT_INEXISTENTE THEN
        MENSAJE :='ESE CLIENTE NO ESTA REGISTRADO';
        ROLLBACK;
    WHEN NUMERO_ES_NULL THEN
        MENSAJE :='NO SE INGRESO EL NUEVO NUMERO DE CASA';
        ROLLBACK;
    WHEN NUMERO_INVALIDO THEN
        MENSAJE := 'EL NUMERO TIENE MAS DE 4 DIGITOS';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERRO NO IDENTIFICADO EN ACTUALIZAR NUMERO CASA';
        ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE ACTUALIZAR_NUMERO_DEPARTAMENTO(
    RUT_ENTRADA IN CLIENTE.RUT%TYPE,
    NUEVO_NUMERO IN CLIENTE.DIRECCION_CLIENTE.NUMERO_DEPARTAMENTO%TYPE,
    MENSAJE OUT VARCHAR
)
IS 
    RUT_ES_NULL EXCEPTION;
    RUT_INEXISTENTE EXCEPTION;
    NUMERO_ES_NULL EXCEPTION;
    NUMERO_INVALIDO EXCEPTION;
    REPETICIONES NUMBER;
BEGIN
    LOCK TABLE CLIENTE IN ROW EXCLUSIVE MODE;
    IF RUT_ENTRADA IS NULL THEN
        RAISE RUT_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM CLIENTE WHERE RUT = RUT_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE RUT_INEXISTENTE;
        ELSE
            IF NUEVO_NUMERO IS NULL THEN
                RAISE NUMERO_ES_NULL;
            ELSE
                IF NUEVO_NUMERO < 1000 OR NUEVO_NUMERO > 9999 THEN 
                    RAISE NUMERO_INVALIDO;
                ELSE
                    UPDATE CLIENTE C SET C.DIRECCION_CLIENTE.NUMERO_DEPARTAMENTO = NUEVO_NUMERO WHERE RUT = RUT_ENTRADA;
                    COMMIT;
                    MENSAJE := 'MIAU NUMERO DEPARTAMENTO';
                END IF;
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN RUT_ES_NULL THEN
        MENSAJE :='ES RUT ES NULL';
        ROLLBACK;
    WHEN RUT_INEXISTENTE THEN
        MENSAJE :='ESE CLIENTE NO ESTA REGISTRADO';
        ROLLBACK;
    WHEN NUMERO_ES_NULL THEN
        MENSAJE :='NO SE INGRESO EL NUEVO NUMERO DE DE DEPARTAMENTO';
        ROLLBACK;
    WHEN NUMERO_INVALIDO THEN
        MENSAJE := 'LAS COSAS SOLO TIENE 4 DIGITOS';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERRO NO IDENTIFICADO EN ACTUALIZAR NUMERO DEPARTAMENTO';
        ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE ACTUALIZAR_BLOQUE(
    RUT_ENTRADA IN CLIENTE.RUT%TYPE,
    NUEVO_NUMERO IN CLIENTE.DIRECCION_CLIENTE.BLOQUE%TYPE,
    MENSAJE OUT VARCHAR
)
IS 
    RUT_ES_NULL EXCEPTION;
    RUT_INEXISTENTE EXCEPTION;
    NUMERO_ES_NULL EXCEPTION;
    NUMERO_INVALIDO EXCEPTION;
    REPETICIONES NUMBER;
BEGIN
    LOCK TABLE CLIENTE IN ROW EXCLUSIVE MODE;
    IF RUT_ENTRADA IS NULL THEN
        RAISE RUT_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM CLIENTE WHERE RUT = RUT_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE RUT_INEXISTENTE;
        ELSE
            IF NUEVO_NUMERO IS NULL THEN
                RAISE NUMERO_ES_NULL;
            ELSE
                IF NUEVO_NUMERO < 1000 OR NUEVO_NUMERO > 9999 THEN 
                    RAISE NUMERO_INVALIDO;
                ELSE
                    UPDATE CLIENTE C SET C.DIRECCION_CLIENTE.BLOQUE = NUEVO_NUMERO WHERE RUT = RUT_ENTRADA;
                    COMMIT;
                    MENSAJE := 'MIAU BLOQUE';
                END IF;
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN RUT_ES_NULL THEN
        MENSAJE :='ES RUT ES NULL';
        ROLLBACK;
    WHEN RUT_INEXISTENTE THEN
        MENSAJE :='ESE CLIENTE NO ESTA REGISTRADO';
        ROLLBACK;
    WHEN NUMERO_ES_NULL THEN
        MENSAJE :='NO SE INGRESO EL NUEVO NUMERO DE BLOQUE';
        ROLLBACK;
    WHEN NUMERO_INVALIDO THEN
        MENSAJE := 'LAS COSAS SOLO TIENE 4 DIGITOS';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERRO NO IDENTIFICADO EN ACTUALIZAR BLOQUE';
        ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE ACTUALIZAR_CORREO(
    RUT_ENTRADA IN CLIENTE.RUT%TYPE,
    NUEVO_CORREO IN CLIENTE.CORREO%TYPE,
    MENSAJE OUT VARCHAR
)
IS
    RUT_ES_NULL EXCEPTION;
    RUT_INEXISTENTE EXCEPTION;
    CORREO_ES_NULL EXCEPTION;
    CORREO_REPETIDO EXCEPTION;
    REPETICIONES NUMBER;
BEGIN
     LOCK TABLE CLIENTE IN ROW EXCLUSIVE MODE;
    IF RUT_ENTRADA IS NULL THEN
        RAISE RUT_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM CLIENTE WHERE RUT = RUT_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE RUT_INEXISTENTE;
        ELSE
            IF NUEVO_CORREO IS NULL THEN
                RAISE CORREO_ES_NULL;
            ELSE
                SELECT COUNT(*) INTO REPETICIONES FROM CLIENTE WHERE CORREO = NUEVO_CORREO;
                IF REPETICIONES = 1 THEN
                    RAISE CORREO_REPETIDO;
                ELSE
                    UPDATE CLIENTE SET CORREO = NUEVO_CORREO WHERE RUT = RUT_ENTRADA;
                    COMMIT;
                    MENSAJE := 'MIAU CORREO';
                END IF;
            END IF;
        END IF;
    END IF; 
EXCEPTION
    WHEN RUT_ES_NULL THEN
        MENSAJE :='ES RUT ES NULL';
        ROLLBACK;
    WHEN RUT_INEXISTENTE THEN
        MENSAJE :='ESE CLIENTE NO ESTA REGISTRADO';
        ROLLBACK;
    WHEN CORREO_ES_NULL THEN
        MENSAJE :='NO SE INGRESO UN CORREO';
        ROLLBACK;
    WHEN CORREO_REPETIDO THEN
        MENSAJE :='ALGUIEN YA REGISTRO ESE CORREO';
        ROLLBACK;
END;


-- CATEGORIA

CREATE OR REPLACE PROCEDURE ACTUALIZAR_NOMBRE_CATEGORIA(
    CODIGO_ENTRADA IN CATEGORIA.CODIGO_CATEGORIA%TYPE,
    NUEVO_NOMBRE IN CATEGORIA.NOMBRE_CATEGORIA%TYPE,
    MENSAJE OUT VARCHAR
)
IS 
    CODIGO_ES_NULL EXCEPTION;
    CODIGO_INEXISTENTE EXCEPTION;
    NOMBRE_ES_NULL EXCEPTION;
    NOMBRE_REPETIDO EXCEPTION;
    REPETICIONES NUMBER;
BEGIN
    LOCK TABLE CATEGORIA IN ROW EXCLUSIVE MODE;
    IF CODIGO_ENTRADA IS NULL THEN
        RAISE CODIGO_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM CATEGORIA WHERE CODIGO_CATEGORIA = CODIGO_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE CODIGO_INEXISTENTE;
        ELSE
            IF NUEVO_NOMBRE IS NULL THEN
                RAISE NOMBRE_ES_NULL;
            ELSE
                SELECT COUNT(*) INTO REPETICIONES FROM CATEGORIA WHERE NOMBRE_CATEGORIA = NUEVO_NOMBRE;
                IF REPETICIONES = 1 THEN
                    RAISE NOMBRE_REPETIDO;
                ELSE
                    UPDATE CATEGORIA SET NOMBRE_CATEGORIA = NUEVO_NOMBRE WHERE CODIGO_CATEGORIA = CODIGO_ENTRADA;
                    COMMIT;
                    MENSAJE := 'MIAU NOMBRE CATEGORIA';
                END IF;
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN CODIGO_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO EL CODIGO DE CATEGORIA';
        ROLLBACK;
    WHEN CODIGO_INEXISTENTE THEN
        MENSAJE := 'NO EXISTE ESE CODIGO DE CATEGORIA';
        ROLLBACK;
    WHEN NOMBRE_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO EL NUEVO NOMBRE DE CATEGORIA';
        ROLLBACK;
    WHEN NOMBRE_REPETIDO THEN
        MENSAJE := 'ESE NOMBRE DE CATEGORIA YA ESTA REGISTADO';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERROR AL CAMBIAR NOMBRE DE CATEGORIA';
        ROLLBACK;
END;

-- PRODUCTO

CREATE OR REPLACE PROCEDURE ACTUALIZAR_NOMBRE_PRODUCTO(
    CODIGO_ENTRADA IN PRODUCTO.CODIGO_PRODUCTO %TYPE,
    NUEVO_NOMBRE IN PRODUCTO.NOMBRE%TYPE,
    MENSAJE OUT VARCHAR
)
IS
    CODIGO_ES_NULL EXCEPTION;
    CODIGO_INEXISTENTE EXCEPTION;
    NOMBRE_ES_NULL EXCEPTION;
    NOMBRE_REPETIDO EXCEPTION;
    REPETICIONES NUMBER;
BEGIN 
    LOCK TABLE PRODUCTO IN ROW EXCLUSIVE MODE;
    IF CODIGO_ENTRADA IS NULL THEN
        RAISE CODIGO_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGO_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE CODIGO_INEXISTENTE;
        ELSE
            IF NUEVO_NOMBRE IS NULL THEN
                RAISE NOMBRE_ES_NULL;
            ELSE
                SELECT COUNT(*) INTO REPETICIONES FROM PRODUCTO WHERE NOMBRE = NUEVO_NOMBRE;
                IF REPETICIONES = 1 THEN
                    RAISE NOMBRE_REPETIDO;
                ELSE
                    UPDATE PRODUCTO SET NOMBRE = NUEVO_NOMBRE WHERE CODIGO_PRODUCTO = CODIGO_ENTRADA;
                    COMMIT;
                    MENSAJE := 'MIAU NOMBRE PRODUCTO';
                END IF;
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN CODIGO_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO EL CODIGO DE PRODUCTO';
        ROLLBACK;
    WHEN CODIGO_INEXISTENTE THEN
        MENSAJE := 'NO EXISTE ESE PRODUCTO';
        ROLLBACK;
    WHEN NOMBRE_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO EN NOMBRE DEL NUEVO PRODUCTO';
        ROLLBACK;
    WHEN NOMBRE_REPETIDO THEN
        MENSAJE := 'ESE NOMBRE YA ESTA REGISTRADO';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERROR NO CAPTURADO AL ACTUALIZAR NOMBRE PRODUCTO';
        ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE ACTUALIZAR_PRECIO(
    CODIGO_ENTRADA IN PRODUCTO.CODIGO_PRODUCTO%TYPE,
    NUEVO_PRECIO IN PRODUCTO.PRECIO%TYPE,
    MENSAJE OUT VARCHAR
)
IS 
    CODIGO_ES_NULL EXCEPTION;
    CODIGO_INEXISTENTE EXCEPTION;
    PRECIO_ES_NULL EXCEPTION;
    PRECIO_INVALIDO EXCEPTION;
    REPETICIONES NUMBER;
BEGIN
    LOCK TABLE PRODUCTO IN ROW EXCLUSIVE MODE;
    IF CODIGO_ENTRADA IS NULL THEN
        RAISE CODIGO_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGO_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE CODIGO_INEXISTENTE;
        ELSE
            IF NUEVO_PRECIO IS NULL THEN
                RAISE PRECIO_ES_NULL;
            ELSE
                IF NUEVO_PRECIO < 1 THEN
                    RAISE PRECIO_INVALIDO;
                ELSE
                    UPDATE PRODUCTO SET PRECIO = NUEVO_PRECIO WHERE CODIGO_PRODUCTO = CODIGO_ENTRADA;
                    COMMIT;
                    MENSAJE := 'MIAU PRECIO';
                END IF;
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN CODIGO_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO EL CODIGO DE PRODUCTO';
        ROLLBACK;
    WHEN CODIGO_INEXISTENTE THEN
        MENSAJE := 'NO EXISTE ESE PRODUCTO';
        ROLLBACK;
    WHEN PRECIO_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO EL PRECIO DEL PRODUCTO';
        ROLLBACK;
    WHEN PRECIO_INVALIDO THEN
        MENSAJE := 'NO SE PUEDE INGRESAR ESE PRECIO';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERROR NO CAPTURADO AL ACTUALIZAR PRECIO PRODUCTO';
        ROLLBACK;
END;


CREATE OR REPLACE PROCEDURE ACTUALIZAR_RESTRICION(
    CODIGO_ENTRADA IN PRODUCTO.CODIGO_PRODUCTO %TYPE,
    NUEVA_RESTRICION IN PRODUCTO.RESTRINGIDO%TYPE,
    MENSAJE OUT VARCHAR
)
IS 
    CODIGO_ES_NULL EXCEPTION;
    CODIGO_INEXISTENTE EXCEPTION;
    RESTRICION_ES_NULL EXCEPTION;
    RESTRICION_INVALIDA EXCEPTION;
    REPETICIONES NUMBER;
    ENTRADA_MINUSCULA VARCHAR(2);
BEGIN
    LOCK TABLE PRODUCTO IN ROW EXCLUSIVE MODE;
    IF CODIGO_ENTRADA IS NULL THEN
        RAISE CODIGO_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGO_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE CODIGO_INEXISTENTE;
        ELSE
            IF NUEVA_RESTRICION IS NULL THEN
                RAISE RESTRICION_ES_NULL;
            ELSE
                ENTRADA_MINUSCULA := LOWER(NUEVA_RESTRICION);
                IF ENTRADA_MINUSCULA = 'si' OR ENTRADA_MINUSCULA = 'no' THEN
                    UPDATE PRODUCTO SET RESTRINGIDO = ENTRADA_MINUSCULA WHERE CODIGO_PRODUCTO = CODIGO_ENTRADA;
                    COMMIT;
                    MENSAJE := 'MIAU RESTRINGIDO';
                ELSE
                    RAISE RESTRICION_INVALIDA;
                END IF;
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN CODIGO_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO EL CODIGO DE PRODUCTO';
        ROLLBACK;
    WHEN CODIGO_INEXISTENTE THEN
        MENSAJE := 'NO EXISTE ESE PRODUCTO';
        ROLLBACK;
    WHEN RESTRICION_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO SI ES RESTRINGIDO O NO';
        ROLLBACK;
    WHEN RESTRICION_INVALIDA THEN
        MENSAJE := 'SOLO SE PUEDE INGRESAR SI O NO';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERROR NO CAPTURADO AL ACTUALIZAR NOMBRE PRODUCTO';
        ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE AGREGAR_STOCK(
    CODIGO_ENTRADA IN PRODUCTO.CODIGO_PRODUCTO %TYPE,
    STOCK_A_AGREGAR IN PRODUCTO.STOCK%TYPE,
    MENSAJE OUT VARCHAR
)
IS 
    CODIGO_ES_NULL EXCEPTION;
    CODIGO_INEXISTENTE EXCEPTION;
    AGREGADO_ES_NULL EXCEPTION;
    AGREGADO_INVALIDO EXCEPTION;
    REPETICIONES NUMBER;
    STOCK_ACTUAL NUMBER;
BEGIN
    LOCK TABLE PRODUCTO IN ROW EXCLUSIVE MODE;
    IF CODIGO_ENTRADA IS NULL THEN
        RAISE CODIGO_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGO_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE CODIGO_INEXISTENTE;
        ELSE
            IF STOCK_A_AGREGAR IS NULL THEN
                RAISE AGREGADO_ES_NULL;
            ELSE
                IF STOCK_A_AGREGAR < 1 THEN
                    RAISE AGREGADO_INVALIDO;
                ELSE
                    SELECT STOCK INTO STOCK_ACTUAL FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGO_ENTRADA;
                    UPDATE PRODUCTO SET STOCK = STOCK_ACTUAL + STOCK_A_AGREGAR WHERE CODIGO_PRODUCTO = CODIGO_ENTRADA;
                    COMMIT;
                    MENSAJE := 'MIAU STOCK AGREGADO';
                END IF;
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN CODIGO_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO EL CODIGO DE PRODUCTO';
        ROLLBACK;
    WHEN CODIGO_INEXISTENTE THEN
        MENSAJE := 'NO EXISTE ESE PRODUCTO';
        ROLLBACK;
    WHEN AGREGADO_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO EL STOCK A AGREGAR';
        ROLLBACK;
    WHEN AGREGADO_INVALIDO THEN
        MENSAJE := 'NO SE PUEDE AGREGAR ESA CANTIDAD AL STOCK';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERROR NO CAPTURADO AL AGREGAR STOCK AL PRODUCTO';
        ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE QUITAR_STOCK(
    CODIGO_ENTRADA IN PRODUCTO.CODIGO_PRODUCTO %TYPE,
    STOCK_A_QUITAR IN PRODUCTO.STOCK%TYPE,
    MENSAJE OUT VARCHAR
)
IS 
    CODIGO_ES_NULL EXCEPTION;
    CODIGO_INEXISTENTE EXCEPTION;
    QUITAR_ES_NULL EXCEPTION;
    QUITAR_INVALIDO EXCEPTION;
    REPETICIONES NUMBER;
    STOCK_ACTUAL NUMBER;
BEGIN
    LOCK TABLE PRODUCTO IN ROW EXCLUSIVE MODE;
    IF CODIGO_ENTRADA IS NULL THEN
        RAISE CODIGO_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGO_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE CODIGO_INEXISTENTE;
        ELSE
            IF STOCK_A_QUITAR IS NULL THEN
                RAISE QUITAR_ES_NULL;
            ELSE
                SELECT STOCK INTO STOCK_ACTUAL FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGO_ENTRADA;
                IF STOCK_A_QUITAR < 1 OR STOCK_A_QUITAR > STOCK_ACTUAL THEN
                    RAISE QUITAR_INVALIDO;
                ELSE
                    UPDATE PRODUCTO SET STOCK = STOCK_ACTUAL - STOCK_A_QUITAR WHERE CODIGO_PRODUCTO = CODIGO_ENTRADA;
                    COMMIT;
                    MENSAJE := 'MIAU STOCK QUITADO';
                END IF;
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN CODIGO_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO EL CODIGO DE PRODUCTO';
        ROLLBACK;
    WHEN CODIGO_INEXISTENTE THEN
        MENSAJE := 'NO EXISTE ESE PRODUCTO';
        ROLLBACK;
    WHEN QUITAR_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO EL STOCK A DESCONTAR';
        ROLLBACK;
    WHEN QUITAR_INVALIDO THEN
        MENSAJE := 'NO SE PUEDE DESCONTAR ESA CANTIDAD AL STOCK';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERROR NO CAPTURADO AL QUITAR STOCK AL PRODUCTO';
        ROLLBACK;
END;

-- CARRO TEMPORAL

CREATE OR REPLACE PROCEDURE ACTUALIZAR_CANTIDAD_VENTA(
    CODIGO_CARRO_ENTRADA IN CARRO_TEMPORAL.CODIGO_CARRO%TYPE,
    CODIGO_PRODUCTO_ENTRADA IN CARRO_TEMPORAL.CODIGO_CARRO%TYPE,
    NUEVA_CANTIDAD IN CARRO_TEMPORAL.CANTIDAD%TYPE,
    MENSAJE OUT VARCHAR
)
IS 
    CODIGO_CARRO_ES_NULL EXCEPTION;
    CODIGO_CARRO_INEXISTENTE EXCEPTION;
    CODIGO_PRODUCTO_ES_NULL EXCEPTION;
    CODIGO_PRODUCTO_INEXISTENTE EXCEPTION;
    CANTIDAD_ES_NULL EXCEPTION;
    CANTIDAD_INVALIDA EXCEPTION;
    REPETICIONES NUMBER;
    STOCK_ACTUAL NUMBER;
    PRECIO_PRODUCTO NUMBER;
    NUEVO_TOTAL NUMBER;
BEGIN
    LOCK TABLE CARRO_TEMPORAL IN ROW EXCLUSIVE MODE;
    IF CODIGO_CARRO_ENTRADA IS NULL THEN
        RAISE CODIGO_CARRO_ES_NULL;
    ELSE
        SELECT COUNT(*) INTO REPETICIONES FROM CARRO_TEMPORAL WHERE CODIGO_CARRO = CODIGO_CARRO_ENTRADA;
        IF REPETICIONES = 0 THEN
            RAISE CODIGO_CARRO_INEXISTENTE;
        ELSE
            IF CODIGO_PRODUCTO_ENTRADA IS NULL THEN
                RAISE CODIGO_PRODUCTO_ES_NULL;
            ELSE
                SELECT COUNT(*) INTO REPETICIONES FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGO_PRODUCTO_ENTRADA;
                IF REPETICIONES = 0 THEN
                    RAISE CODIGO_PRODUCTO_INEXISTENTE;
                ELSE
                    IF NUEVA_CANTIDAD IS NULL THEN
                        RAISE CANTIDAD_ES_NULL;
                    ELSE
                        SELECT STOCK INTO STOCK_ACTUAL FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGO_PRODUCTO_ENTRADA;
                        IF NUEVA_CANTIDAD < 0 OR NUEVA_CANTIDAD > STOCK_ACTUAL THEN
                            RAISE CANTIDAD_INVALIDA;
                        ELSE
                            SELECT PRECIO INTO PRECIO_PRODUCTO FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGO_PRODUCTO_ENTRADA;
                            UPDATE CARRO_TEMPORAL SET CANTIDAD = NUEVA_CANTIDAD WHERE CODIGO_CARRO = CODIGO_CARRO_ENTRADA;
                            NUEVO_TOTAL := PRECIO_PRODUCTO * NUEVA_CANTIDAD;
                            UPDATE CARRO_TEMPORAL SET TOTAL = NUEVO_TOTAL WHERE CODIGO_CARRO = CODIGO_CARRO_ENTRADA;
                            COMMIT;
                            MENSAJE := 'CANTIDAD ACTUALIZADA EN VENTA CARRO';
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN CODIGO_CARRO_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO EL CODIGO DEL CARRO';
        ROLLBACK;
    WHEN CODIGO_CARRO_INEXISTENTE THEN
        MENSAJE := 'NO EXISTE ESA VENTA EN SU CARRO';
        ROLLBACK;
    WHEN CODIGO_PRODUCTO_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO EL CODIGO DEL PRODUCTO';
        ROLLBACK;
    WHEN CODIGO_PRODUCTO_INEXISTENTE THEN
        MENSAJE := 'NO EXISTE ESE PRODUCTO EN NUESTRA TIENDA';
        ROLLBACK;
    WHEN CANTIDAD_ES_NULL THEN
        MENSAJE := 'NO SE INGRESO LA NUEVA CANTIDAD DE ESTE PRODUCTO';
        ROLLBACK;
    WHEN CANTIDAD_INVALIDA THEN
        MENSAJE := 'NO PUEDE LLEVAR ESA CANTIDAD DE ESE PRODUCTO';
        ROLLBACK;
    WHEN OTHERS THEN
        MENSAJE := 'ERRO NO CAPTURADO ACTUALIZAR LA CANTIDAD DE UNA VENTA DEL CARRO';
        ROLLBACK;
END;

